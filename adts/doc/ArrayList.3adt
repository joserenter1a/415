.\" Process this file with
.\" groff -man -Tascii ArrayList.3adt
.\"
.TH ArrayList 3adt "July 2021" "University of Oregon" ADTs
.SH NAME
ArrayList ADT man page
.SH SYNOPSIS
#include "ADTs/arraylist.h"
.sp
const ArrayList *al = ArrayList_create(long capacity,
.br
                                       void (*freeValue)(void *e));
.sp
void al->destroy(al);
.sp
void al->clear(al);
.sp
bool al->add(al, void *element);
.sp
bool al->get(al, long index, void **element);
.sp
bool al->insert(al, long index, void *element);
.sp
bool al->remove(al, long index);
.sp
bool al->set(al, long index, void *element);
.sp
bool al->isEmpty(al);
.sp
long al->size(al);
.sp
bool al->ensureCapacity(al, long minCapacity);
.sp
bool al->trimToSize(al);
.sp
void **al->toArray(al, long *len);
.sp
const Iterator *al->itCreate(al);
.SH DESCRIPTION
ArrayList_create() creates an array list with the specified `capacity';
if capacity == 0L, a default initial capacity is used.
`freeValue' is a function pointer that will be called by
destroy(), clear(), remove(), and set() on each relevant entry/entries in the
array list. If you are storing basic data types in the ArrayList, you should
specify `doNothing'; if you are storing pointers to heap-allocated values
created using `malloc()' or `strdup()', you should specify free; if the values
you are storing have more complicated relationships to the heap, you should
specify the name of a function you have created to return the heap allocations
associated with a value in the ArrayList.
Returns a pointer to the dispatch table, or NULL if there are malloc() errors.
.sp
The destroy() method destroys the array list.
It applies the constructor-specified freeValue() to each element
in the array list before returning heap storage associated with the
ArrayList instance to the heap.
.sp
The clear() method clears all elements from the array list.
It applies the constructor-specified freeValue() to each element
in the array list.
Upon return, the array list is empty.
.sp
The add() method appends `element' to the array list; if no more room in the
list, it is dynamically resized.
The method return value is `true' if successful, `false' if malloc() error.
.sp
The get() method returns the element at the specified index in
.br
`*element'.
The method return value is `true' if successful, `false' if unoccupied index.
.sp
The insert() method inserts `element' at the specified `index' in the array list;
all elements from that index onward are shifted one position to the right.
If no more room in the list, it is dynamically resized.
If the current size of the list is N, legal index values are in the interval
[0, N].
The method return value is `true' if successful, `false' if unsuccessful (illegal index
or malloc() error).
.sp
The remove() method removes the element at `index' from the array list;
all elements from [index+1, size-1] are shifted one position left.
Applies the constructor-specified freeValue() to the removed element.
The method return value is `true' if successful, `false' if unoccupied index.
.sp
The set() method replaces the element at `index' with `element'.
Applies the constructor-specified freeValue() to the replaced element.
The method return value is `true' if successful, `false' if unoccupied index.
.sp
The isEmpty() method returns `true' if the array list is empty, `false' if not.
.sp
The size() method returns the number of elements in the array list.
.sp
The ensureCapacity() method guarantees that upon return the array list holds
at least `minCapacity' elements.
The method return value is `true' if successful, `false' if malloc error.
.sp
The trimToSize() method guarantees that upon return the array list capacity
exactly matches the number of elements in the list.
The method return value is `true' if successful, `false' if malloc error.
.sp
The toArray() method returns a heap-allocated array containing the
elements in the array list; it returns the number of elements in the array
in `*len'.
The method return value is a pointer to an array of void * elements, or NULL
if malloc failure OR IF THE ARRAYLIST IS EMPTY.
.br
N.B. The caller is responsible for freeing the array of void * elements when
finished with it.
.sp
The itCreate() method creates an Iterator to the contents of the array list.
The method return value is a pointer to the Iterator so created, or NULL
if malloc failure OR IF THE ARRAYLIST IS EMPTY.
.br
N.B. The caller is responsible for destroying the iterator when finished with
it.
.SH FILES
/usr/local/include/ADTs/arraylist.h
.br
/usr/local/lib/libADTs.a
.SH AUTHOR
Joe Sventek <jsventek@gmail.com>
.SH "SEE ALSO"
Intro(3adt), Iterator(3adt)
