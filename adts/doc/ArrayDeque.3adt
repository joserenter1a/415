.\" Process this file with
.\" groff -man -Tascii ArrayDeque.3adt
.\"
.TH ArrayDeque 3adt "June 2021" "University of Oregon" ADTs
.SH NAME
ArrayDeque ADT man page
.SH SYNOPSIS
#include "ADTs/arraydeque.h"
.sp
const Deque *d = ArrayDeque(long capacity,
.br
                            void (*freeValue)(void *e));
.sp
const Deque *d = Deque_create(void (*freeValue)(void *e));
.sp
const Deque *d->create(d);
.sp
void d->destroy(d);
.sp
void d->clear(d);
.sp
bool d->insertFirst(d, ADT_VALUE(variable));
.sp
bool d->insertLast(d, ADT_VALUE(variable));
.sp
bool d->first(d, ADT_ADDRESS(&variable));
.sp
bool d->last(d, ADT_ADDRESS(&variable));
.sp
bool d->removeFirst(d, ADT_ADDRESS(&variable));
.sp
bool d->removeLast(d, ADT_ADDRESS(&variable));
.sp
bool d->isEmpty(d);
.sp
long d->size(d);
.sp
void **d->toArray(d, long *len);
.sp
const Iterator *d->itCreate(d);
.SH DESCRIPTION
ArrayDeque() creates an array-based deque of the specified `capacity';
if `capacity' == 0L, a default capacity (50L) is used.
`freeValue' is a function pointer that will be called by
destroy() and clear() on each entry in the deque before performing its function;
if the elements being stored in the Deque are basic data types, the `freeValue'
argument should be `doNothing'.
Returns a pointer to the dispatch table, or NULL if there are malloc() errors.
.sp
Deque_create() creates a deque;
`freeValue' is a function pointer that will be called by
destroy() and clear() on each entry in the deque before performing its function;
if the elements being sored in the Deque are basic data types, the `freeValue'
argument should be `doNothing'.
Returns a pointer to the dispatch table, or NULL if there are malloc() errors.
.sp
The create() method creates a new deque using the same implementation as
`d'; returns NULL if error creating the new deque.
.sp
The destroy() method destroys the deque.
It applies the constructor-specified freeValue() to each element
in the deque before returning heap storage associated with the
Deque instance to the heap.
.sp
The clear() method clears all elements from the deque.
It applies the constructor-specified freeValue() to each element
in the deque.
Upon return, the deque is empty.
.sp
The insertFirst() method inserts the value in `variable' at the head of the
deque; if no more room in the
deque, it is dynamically resized.
The method return value is true if successful, false if malloc() error.
.sp
The insertLast() method inserts the value in `variable' at the tail of the
deque; if no more room in the
deque, it is dynamically resized.
The method return value is true if successful, false if malloc() error.
.sp
The first() method copies the element at the head of the deque into `variable'
without removing the element from the deque.
The method return value is true if successful, false if the deque was empty.
.sp
The last() method copies the element at the tail of the deque into `variable'
without removing the element from the deque.
The method return value is true if successful, false if the deque was empty.
.sp
The removeFirst() method removes the element at the head of the deque,
copying it into `variable'.
The method return value is true if successful, false if the deque was empty.
.sp
The removeLast() method removes the element at the tail of the deque,
copying it into `variable'.
The method return value is true if successful, false if the deque was empty.
.sp
The isEmpty() method returns true if the deque is empty, false if not.
.sp
The size() method returns the number of elements in the deque.
.sp
The toArray() method returns a heap-allocated array containing the
elements in the deque in the order head to tail;
it returns the number of elements in the array in `*len'.
The method return value is a pointer to an array of void * elements, or NULL
if malloc failure OR IF THE DEQUE IS EMPTY.
To use the elements of the array, the user must cast each array element to the
actual type of the values stored in the deque.
.br
N.B. The caller is responsible for freeing the array of void * elements when
finished with it.
.sp
The itCreate() method creates an Iterator to the contents of the deque.
The iterator returns the deque elements in the order head to tail.
The method return value is a pointer to the Iterator so created, or NULL
if malloc failure OR IF THE DEQUE IS EMPTY.
To use the void * values returned by Iterator.next(), the user must cast the
value to the actual type of the values stored in the deque.
.br
N.B. The caller is responsible for destroying the iterator when finished with
it.
.SH FILES
/usr/local/include/ADTs/arraydeque.h, /usr/local/include/ADTs/deque.h
.br
/usr/local/lib/libADTs.a
.SH AUTHOR
Joe Sventek <jsventek@gmail.com>
.SH "SEE ALSO"
Intro(3adt), Deque(3adt), LListDeque(3adt), Iterator(3adt)
